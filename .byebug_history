c 
c
newContact.save
c
newContact
c
newContact.errors.full_messages
c
newContact
c
response.status
response[:status]
response
response.status
response.read_body
c
id_bilda
c
jsonResponse[0]["id"]
jsonResponse[0].id
jsonResponse[0]
jsonResponse[']
jsonResponse
c
@property[0]
@property
c
response
c
response.read_body
responseread_body
response
c
User.destroy(1)
userDeleted[0].id
userDeleted[0]
userDeleted
userDeleted.destroy()
x = userDeleted.destroy()
userDeleted
id
c
params[:id]
params[:id*
params[:id
id
c
params[:id]
params
c
delete
c
deleted = PropertyInformations.where(id:id)
id
deleted
c
JSON.parse(response.read_body)["uploaded_resources"][0]["new_url"]
JSON.parse(response.read_body)["uploaded_resources"][0]
JSON.parse(response.read_body)["uploaded_resources"]
c
JSON.parse(response.read_body)["n_failures"]c
JSON.parse(response.read_body)["n_failures"]
JSON.parse(response.read_body)
response.read_bodyhttps://res.cloudinary.com/ampipspace/image/upload/v1632757968/AMPIP/oqv07uh8wlobe80ahmze.png
response.read_body
response
c
JSON.parse(uploadResource)["n_failures"]
JSON.parse(uploadResource)[:n_failures]
JSON.parse(uploadResource)
JSON.parse(uploadResource)[1]
JSON.parse(uploadResource)[0]
JSON.parse(uploadResource)
JSON.parse(uploadResource).n_failures
JSON.parse(uploadResource)[0]
JSON.parse(uploadResource)
uploadResource[0]
uploadResource
c
imagen
c
url
c
params[:id]
params
parans
c
response.read_body
response
c
params
c
newTenantUser.saveD
newTenantUser.save
newTenantUser = TenantUser.new(permit_params.merge(property_id: 3))
newTenantUser = TenantUser.new(permit_params.merge(property_id: 3 ))
getProps.id
getProps.is
newTenantUser.save
newTenantUser = TenantUser.new(permit_params.merge(property_id: getProps.id ))
getProps.save
getProps
c
TenantUser.find(1)
c
TenantUser.find(3)
TenantUser
c
params[:id]
c
TenantUser.delete(params[:id])
params[:id]
c
c}
c
cc
c
user_information[:user_rols_id]
user_rols_id
Permissions::RescuePermission.new(user_information[:user_rols_id]).call
user_information[:user_rols_id]
user_information
user_permissions = Permissions::RescuePermission.new(user_information[:user_rols_id]).call
user_information != 0
c
user_information = rescue_user_information(@params[:id])[0]
c
userInfo[0].id
userInfo
c
userInfo[0].id
userInfo[0]
userInfo
c
params[:id]
params[:is]
c
params
Products
a
c
disponibility.update(status_property:status)
c
StatusDisponibility.where(id:1)
StatusDisponibility.where(id:1)StatusDisponibility.where(id:1)
StatusDisponibility.where(id:1)
StatusDisponibility
id
c
status_disponibilities_extrac
c
updateSatusDisponibilities.update(permit_params)
c
updateSatusDisponibilities.errors.full_messages
updateSatusDisponibilities.update(permit_params)
c
updateSatusDisponibilities.update(permit_params)
c
params[:id][:id]
params[:id]
params
params[:id].id
params[:id]
PropertyInformations.where(id:params[:id])
updatePropertyInformationPropertyInformations.where(id:params[:id])
updatePropertyInformation
PropertyInformations.where(id:4)
params[:id]
updatePropertyInformation
c
UserInformation.where(user_id:user.id)
c
user.update(user_params)
c
user.update(user_params)
user.updateuser.update(user_params)
user.update
c
id
c
id
c
id
c
id
c
id
c
corporate
c
deleted
c
UserInformation
UserInformations
User
deleted.update(status:false)
deleted.update(status:2)
deleted = Corporate.where(id:1)
Corporate.where(id:1)
Corporate.last
Corporate
c
deleted.update(status:2)
deleted.update(status:0)
deleted.update(status:20)
deleted.update(status:0)
deleted = PropertyInformations.where(property_id:1)
PropertyInformations.where(id)
PropertyInformation
Property.where(id)
Property
params[:id]
params
c
params
c
{"user": dataUser[0],"informacion": users.first, "corporate": corporate[0]}
json: {"user": dataUser[0],"informacion": users.first, "corporate": corporate[0]}
c
render json: {"user": dataUser[0],"informacion": users.first, "corporate": corporate[0]}
corporate[0]
dataUser[0]
dataUser[0]dataUser[0]
users.first
users = User.where(id: dataUser[0].user_id)
User.where(id: dataUser[0].user_id)
orporate.where(id: dataUser[0].corporate_id)
Corporate.where(id: dataUser[0].corporate_id)
Corporate.where(id: dataUser[0].id)
dataUser[0].user_id
dataUser[0].id
dataUser[0]
dataUser
c
params
c
updatePropertyInformation.update(status: params[:status])
c
params[:id]
c
x
c
params
c
document.save
c
document.save
c
params
c
updatePropertyInformation
c
updatePropertyInformation
c
updatePropertyInformation
c
